<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#0088ff" />
    <meta
      name="description"
      content="AI Sports Edge - Login to access AI-Powered Sports Betting Predictions"
    />

    <title>AI Sports Edge - Login</title>

    <!-- Security Headers -->
    <meta
      http-equiv="Content-Security-Policy"
      content="default-src 'self'; script-src 'self' https://www.googletagmanager.com https://www.google-analytics.com https://www.gstatic.com 'unsafe-inline' 'unsafe-eval'; style-src 'self' https://fonts.googleapis.com 'unsafe-inline'; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.aisportsedge.com https://www.google-analytics.com https://firebaseinstallations.googleapis.com https://firebaseremoteconfig.googleapis.com https://firestore.googleapis.com; frame-src 'self' https://accounts.google.com https://aisportsedge.firebaseapp.com; object-src 'none';"
    />
    <meta http-equiv="X-Content-Type-Options" content="nosniff" />
    <meta http-equiv="X-Frame-Options" content="SAMEORIGIN" />
    <meta http-equiv="X-XSS-Protection" content="1; mode=block" />
    <meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin" />
    <meta http-equiv="Permissions-Policy" content="camera=(), microphone=(), geolocation=(self), interest-cohort=()" />

    <!-- Favicon -->
    <link rel="icon" href="/images/ai_logo.webp" />
    <link rel="apple-touch-icon" href="/images/ai_logo.webp" />

    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap"
      rel="stylesheet"
    />

    <!-- Styles -->
    <link rel="stylesheet" href="styles.css" />
    <link rel="stylesheet" href="neon-ui.css" />

    <style>
      /* Login-specific styles */
      .login-container {
        max-width: 400px;
        margin: 80px auto;
        padding: 30px;
        background-color: var(--background-card);
        border-radius: var(--border-radius-md);
        border: var(--neon-border);
        box-shadow: var(--neon-glow);
      }

      .login-title {
        font-size: 2rem;
        font-weight: 800;
        text-align: center;
        margin-bottom: 30px;
        color: var(--primary-color);
        text-shadow: var(--neon-text-glow);
      }

      .login-form {
        display: flex;
        flex-direction: column;
        gap: 20px;
      }

      .form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
      }

      .form-label {
        font-size: 0.9rem;
        font-weight: 600;
        color: var(--text-gray);
      }

      .form-input {
        padding: 12px 16px;
        border-radius: var(--border-radius-sm);
        background-color: rgba(255, 255, 255, 0.05);
        border: 1px solid rgba(255, 255, 255, 0.1);
        color: var(--text-light);
        font-size: 1rem;
        transition: all 0.3s ease;
      }

      .form-input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: var(--neon-glow);
      }

      .login-button {
        padding: 12px;
        border: none;
        border-radius: var(--border-radius-md);
        background: linear-gradient(
          135deg,
          var(--primary-color) 0%,
          var(--primary-dark) 100%
        );
        color: var(--text-light);
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: var(--neon-glow);
        margin-top: 10px;
      }

      .login-button:hover {
        transform: translateY(-3px);
        box-shadow: 0 0 15px rgba(0, 136, 255, 0.8);
      }

      .signup-button {
        background: transparent;
        border: 1px solid var(--primary-color);
      }

      .signup-button:hover {
        background-color: rgba(0, 136, 255, 0.1);
      }

      .error-message {
        color: #ff4d4d;
        font-size: 0.9rem;
        margin-top: 20px;
        text-align: center;
        display: none;
      }

      .success-message {
        color: #00e676;
        font-size: 0.9rem;
        margin-top: 20px;
        text-align: center;
        display: none;
      }

      .login-footer {
        margin-top: 20px;
        text-align: center;
        font-size: 0.9rem;
        color: var(--text-gray);
      }

      .login-footer a {
        color: var(--primary-color);
        text-decoration: none;
        transition: all 0.3s ease;
      }

      .login-footer a:hover {
        text-shadow: var(--neon-text-glow);
      }

      /* Loading spinner */
      .spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top-color: var(--text-light);
        animation: spin 1s ease-in-out infinite;
        margin-right: 10px;
        display: none;
      }

      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }

      /* Download prompt */
      .download-prompt {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        backdrop-filter: blur(5px);
        display: none;
      }

      .download-content {
        background-color: var(--background-card);
        border-radius: var(--border-radius-md);
        padding: 30px;
        max-width: 500px;
        width: 90%;
        text-align: center;
        border: var(--neon-border);
        box-shadow: var(--neon-glow);
      }

      .download-title {
        font-size: 1.5rem;
        font-weight: 700;
        margin-bottom: 20px;
        color: var(--primary-color);
        text-shadow: var(--neon-text-glow);
      }

      .download-description {
        margin-bottom: 30px;
        color: var(--text-light);
      }

      .download-buttons {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-bottom: 20px;
      }

      .download-button {
        padding: 12px;
        border-radius: var(--border-radius-md);
        font-weight: 600;
        text-align: center;
        text-decoration: none;
        transition: all 0.3s ease;
      }

      .app-store-button {
        background: linear-gradient(135deg, #0066ff 0%, #0044cc 100%);
        color: white;
        box-shadow: 0 0 10px rgba(0, 102, 255, 0.5);
      }

      .play-store-button {
        background: linear-gradient(135deg, #00c853 0%, #009624 100%);
        color: white;
        box-shadow: 0 0 10px rgba(0, 200, 83, 0.5);
      }

      .web-app-button {
        background: transparent;
        border: 1px solid var(--primary-color);
        color: var(--primary-color);
      }

      .download-close {
        margin-top: 20px;
        color: var(--text-gray);
        text-decoration: underline;
        cursor: pointer;
      }
    </style>

    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-auth-compat.js"></script>
  </head>
  <body>
    <header class="header">
      <div class="container">
        <div class="header-content">
          <a href="/" class="logo">
            <img
              src="/images/ai_logo.webp"
              alt="AI Sports Edge Logo"
              style="width: 40px; height: 40px"
            />
            <span>AI Sports Edge</span>
          </a>
          <nav class="nav">
            <ul class="nav-list">
              <li class="nav-item"><a href="/">Home</a></li>
              <li class="nav-item"><a href="/#features">Features</a></li>
              <li class="nav-item"><a href="/#pricing">Pricing</a></li>
              <li class="nav-item"><a href="/#about">About</a></li>
              <li class="nav-item">
                <a href="/#download" class="download-button">Download</a>
              </li>
            </ul>
          </nav>
        </div>
      </div>
    </header>

    <main>
      <div class="container">
        <div class="login-container">
          <h1 class="login-title">Login to AI Sports Edge</h1>

          <form id="loginForm" class="login-form">
            <div class="form-group">
              <label for="email" class="form-label">Email</label>
              <input
                type="email"
                id="email"
                class="form-input"
                placeholder="Enter your email"
                required
              />
            </div>

            <div class="form-group">
              <label for="password" class="form-label">Password</label>
              <input
                type="password"
                id="password"
                class="form-input"
                placeholder="Enter your password"
                required
              />
            </div>

            <button type="button" id="loginButton" class="login-button">
              <span id="loginSpinner" class="spinner"></span>
              Login
            </button>

            <button
              type="button"
              id="signupButton"
              class="login-button signup-button"
            >
              <span id="signupSpinner" class="spinner"></span>
              Sign Up
            </button>

            <div id="errorMessage" class="error-message"></div>
            <div id="successMessage" class="success-message"></div>
          </form>

          <div class="login-footer">
            <p>
              Forgot your password?
              <a href="#" id="resetPassword">Reset it here</a>
            </p>
          </div>
        </div>
      </div>

      <!-- Download Prompt -->
      <div id="downloadPrompt" class="download-prompt">
        <div class="download-content">
          <h2 class="download-title">Get the AI Sports Edge App</h2>
          <p class="download-description">
            Download our mobile app for the best experience with advanced
            features and real-time notifications.
          </p>

          <div class="download-buttons">
            <a
              href="https://apps.apple.com/us/app/ai-sports-edge/id123456789"
              class="download-button app-store-button"
              target="_blank"
            >
              Download on App Store
            </a>
            <a
              href="https://play.google.com/store/apps/details?id=com.aisportsedge.app"
              class="download-button play-store-button"
              target="_blank"
            >
              Get it on Google Play
            </a>
            <a href="/" class="download-button web-app-button">
              Continue to Web App
            </a>
          </div>

          <a id="closeDownloadPrompt" class="download-close"
            >No thanks, continue to web app</a
          >
        </div>
      </div>
    </main>

    <footer class="footer">
      <div class="container">
        <div class="footer-content">
          <div class="footer-section">
            <h3 class="footer-title">AI Sports Edge</h3>
            <p class="footer-description">
              Your ultimate sports betting companion powered by AI. Get
              predictions, analytics, and insights for smarter betting
              decisions.
            </p>
          </div>
        </div>

        <div class="footer-bottom">
          <p>&copy; 2025 AI Sports Edge. All rights reserved.</p>
        </div>
      </div>
    </footer>

    <script>
      // Add detailed logging
      console.log("Starting Firebase initialization...");
      
      // Initialize Firebase
      const firebaseConfig = {
        apiKey: "AIzaSyDxLufbPyNYpax2MmE5ff27MHA-js9INBw",
        authDomain: "ai-sports-edge.firebaseapp.com",
        projectId: "ai-sports-edge",
        storageBucket: "ai-sports-edge.appspot.com",
        messagingSenderId: "63216708515",
        appId: "1:63216708515:web:209e6baf130386edb00816",
        // Added measurementId for completeness
        measurementId: "G-ABCDEF1234"
      };

      console.log("Firebase config:", JSON.stringify(firebaseConfig));
      console.log("Firebase SDK loaded:", typeof firebase !== 'undefined');
      
      try {
        // Initialize Firebase
        console.log("Attempting to initialize Firebase...");
        
        // Validate Firebase config before initialization
        if (!firebaseConfig.apiKey) {
          throw new Error("Firebase API key is missing");
        }
        if (!firebaseConfig.appId) {
          throw new Error("Firebase App ID is missing");
        }
        
        // Log the exact config being used
        console.log("Using Firebase config:", {
          apiKey: firebaseConfig.apiKey.substring(0, 10) + "...",
          authDomain: firebaseConfig.authDomain,
          projectId: firebaseConfig.projectId,
          appId: firebaseConfig.appId,
          databaseURL: firebaseConfig.databaseURL || "not set",
          measurementId: firebaseConfig.measurementId || "not set"
        });
        
        firebase.initializeApp(firebaseConfig);
        console.log("Firebase initialized successfully!");
        console.log("Firebase auth available:", typeof firebase.auth === 'function');
        
        // Test auth instance
        const auth = firebase.auth();
        console.log("Firebase auth instance created successfully");
      } catch (error) {
        console.error("Error initializing Firebase:", error);
        console.error("Error code:", error.code);
        console.error("Error message:", error.message);
        console.error("Error stack:", error.stack);
        
        // Display error on page for debugging
        document.getElementById("errorMessage").textContent =
          "Firebase initialization error: " + error.message;
        document.getElementById("errorMessage").style.display = "block";
      }

      // DOM Elements
      const loginForm = document.getElementById("loginForm");
      const emailInput = document.getElementById("email");
      const passwordInput = document.getElementById("password");
      const loginButton = document.getElementById("loginButton");
      const signupButton = document.getElementById("signupButton");
      const loginSpinner = document.getElementById("loginSpinner");
      const signupSpinner = document.getElementById("signupSpinner");
      const errorMessage = document.getElementById("errorMessage");
      const successMessage = document.getElementById("successMessage");
      const resetPassword = document.getElementById("resetPassword");
      const downloadPrompt = document.getElementById("downloadPrompt");
      const closeDownloadPrompt = document.getElementById(
        "closeDownloadPrompt"
      );

      // Show error message
      function showError(message) {
        errorMessage.textContent = message;
        errorMessage.style.display = "block";
        successMessage.style.display = "none";
      }

      // Show success message
      function showSuccess(message) {
        successMessage.textContent = message;
        successMessage.style.display = "block";
        errorMessage.style.display = "none";
      }

      // Handle login
      loginButton.addEventListener("click", async () => {
        const email = emailInput.value;
        const password = passwordInput.value;

        if (!email || !password) {
          showError("Please enter both email and password");
          return;
        }

        // Show loading spinner
        loginSpinner.style.display = "inline-block";
        loginButton.disabled = true;

        try {
          // Sign in with Firebase
          await firebase.auth().signInWithEmailAndPassword(email, password);

          // Show success message
          showSuccess("Login successful! Redirecting...");

          // Redirect to main page after a short delay
          setTimeout(() => {
            window.location.href = "/";
          }, 1500);
        } catch (error) {
          // Show error message
          showError(error.message);

          // Hide loading spinner
          loginSpinner.style.display = "none";
          loginButton.disabled = false;
        }
      });

      // Handle signup
      console.log("Setting up signup button click handler");
      
      try {
        signupButton.addEventListener("click", async () => {
          console.log("Signup button clicked");
          
          try {
            const email = emailInput.value;
            const password = passwordInput.value;

            console.log("Sign up attempt with email:", email);
            console.log("Firebase config being used:", JSON.stringify(firebaseConfig));
            console.log("Firebase initialized:", firebase.apps.length > 0);
            console.log("Firebase auth available:", typeof firebase.auth === 'function');

            if (!email || !password) {
              showError("Please enter both email and password");
              return;
            }

            if (password.length < 6) {
              showError("Password must be at least 6 characters");
              return;
            }

            // Show loading spinner
            signupSpinner.style.display = "inline-block";
            signupButton.disabled = true;

            try {
              console.log("Attempting to create user with Firebase...");
              console.log("Firebase auth method:", typeof firebase.auth().createUserWithEmailAndPassword);
              
              // Create user with Firebase
              const authResult = await firebase.auth().createUserWithEmailAndPassword(email, password);
              console.log("User creation successful, auth result:", authResult);

              console.log("User created successfully!");
              // Show success message
              showSuccess("Account created successfully!");

              // Show download prompt
              downloadPrompt.style.display = "flex";
            } catch (error) {
              console.error("Firebase signup error:", error);
              console.error("Error code:", error.code);
              console.error("Error message:", error.message);
              console.error("Error stack:", error.stack);
              
              // Log more details about the error
              console.error("Error is instance of:", Object.prototype.toString.call(error));
              console.error("Error properties:", Object.keys(error));
              
              // Check if it's an API key error
              if (error.code === 'auth/api-key-not-valid') {
                console.error("API Key validation failed. Current API key:", firebaseConfig.apiKey);
                console.error("API Key length:", firebaseConfig.apiKey.length);
                console.error("API Key format valid:", /^AIza[0-9A-Za-z-_]{35}$/.test(firebaseConfig.apiKey));
              }

              // Show error message
              showError(error.message);

              // Hide loading spinner
              signupSpinner.style.display = "none";
              signupButton.disabled = false;
            }
          } catch (outerError) {
            console.error("Error in signup click handler:", outerError);
            showError(
              "An unexpected error occurred. Please check the console for details."
            );
          }
        });
      } catch (setupError) {
        console.error(
          "Error setting up signup button click handler:",
          setupError
        );
      }

      // Handle password reset
      resetPassword.addEventListener("click", async (e) => {
        e.preventDefault();

        const email = emailInput.value;

        if (!email) {
          showError("Please enter your email address");
          return;
        }

        try {
          // Send password reset email
          await firebase.auth().sendPasswordResetEmail(email);

          // Show success message
          showSuccess("Password reset email sent. Check your inbox.");
        } catch (error) {
          // Show error message
          showError(error.message);
        }
      });

      // Handle download prompt close
      closeDownloadPrompt.addEventListener("click", () => {
        downloadPrompt.style.display = "none";

        // Redirect to main page
        window.location.href = "/";
      });

      // Check if user is already logged in
      firebase.auth().onAuthStateChanged((user) => {
        if (user) {
          // User is signed in, redirect to main page
          window.location.href = "/";
        }
      });
    </script>
  </body>
</html>
