import { firebaseService } from '../src/atomic/organisms/firebaseService';
import 'react';
import { View, Text, StyleSheet, ScrollView, TouchableOpacity, TextInput, Alert, ActivityIndicator } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { StackNavigationProp } from '@react-navigation/stack';
import { createGiftSubscription, GIFT_SUBSCRIPTION_AMOUNTS } from '../services/subscriptionService';
import { auth } from '../config/firebase';
// Custom Picker component since @react-native-picker/picker might not be available
const Picker = ({ selectedValue, onValueChange, style, children }: {
  selectedValue: number;
  onValueChange: (value: number) => void;
  style?: any;
  children: React.ReactNode;
}) => {
  // Use a simple dropdown with buttons instead of a select element to avoid DOM type issues
  return (
    <View style={style}>
      <View style={{ padding: 8, borderWidth: 1, borderColor: '#ccc', borderRadius: 4 }}>
        {GIFT_SUBSCRIPTION_AMOUNTS.map((option) => (
          <TouchableOpacity
            key={option.value.toString()}
            style={{
              padding: 10,
              backgroundColor: selectedValue === option.value ? '#f0f0f0' : 'transparent',
              borderRadius: 4,
            }}
            onPress={() => onValueChange(option.value)}
          >
            <Text>{option.label}</Text>
          </TouchableOpacity>
        ))}
      </View>
    </View>
  );
};

// Custom Picker.Item component (not used with the new implementation)
Picker.Item = ({ label, value }: { label: string, value: number }) => {
  return null;
};
import { ThemedText } from '../components/ThemedText';
import { ThemedView } from '../components/ThemedView';

type GiftSubscriptionScreenProps = {
  route?: {
    params?: {
      paymentMethodId?: string;
    }
  }
};

const GiftSubscriptionScreen: React.FC<GiftSubscriptionScreenProps> = ({ route }) => {
  const navigation = useNavigation<StackNavigationProp<any>>();
  const [amount, setAmount] = useState<number>(GIFT_SUBSCRIPTION_AMOUNTS[0].value);
  const [recipientEmail, setRecipientEmail] = useState<string>('');
  const [message, setMessage] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const [giftCode, setGiftCode] = useState<string | null>(null);
  
  // Get payment method ID from route params or use default
  const paymentMethodId = route?.params?.paymentMethodId;
  
  // Handle gift subscription creation
  const handleCreateGiftSubscription = async () => {
    if (!paymentMethodId) {
      navigation.navigate('PaymentScreen', { 
        returnScreen: 'GiftSubscription',
        amount
      });
      return;
    }
    
    if (amount < 2500) {
      Alert.alert('Invalid Amount', 'The minimum gift amount is $25.');
      return;
    }
    
    try {
      setLoading(true);
      
      const userId = auth.currentUser?.uid;
      if (!userId) {
        Alert.alert('Error', 'You must be logged in to create a gift subscription.');
        setLoading(false);
        return;
      }
      
      // Create the gift subscription
      const giftSubscription = await createGiftSubscription(
        userId,
        paymentMethodId,
        amount,
        recipientEmail || undefined,
        message || undefined
      );
      
      // Show success message with the gift code
      setGiftCode(giftSubscription.code);
      
    } catch (error: any) {
      console.error('Error creating gift subscription:', error);
      Alert.alert('Error', error.message || 'Failed to create gift subscription. Please try again.');
    } finally {
      setLoading(false);
    }
  };
  
  // Render gift code success screen
  if (giftCode) {
    return (
      <ThemedView style={styles.container}>
        <ScrollView contentContainerStyle={styles.scrollContent}>
          <View style={styles.successContainer}>
            <Text style={styles.successTitle}>Gift Subscription Created!</Text>
            <Text style={styles.successMessage}>
              Your gift subscription has been created successfully. Share the code below with the recipient.
            </Text>
            
            <View style={styles.codeContainer}>
              <Text style={styles.codeLabel}>Gift Code:</Text>
              <Text style={styles.code}>{giftCode}</Text>
            </View>
            
            <Text style={styles.instructionsTitle}>Redemption Instructions:</Text>
            <Text style={styles.instructions}>
              The recipient can redeem this code by going to Settings &gt; Redeem Gift in the AI Sports Edge app.
            </Text>
            
            {recipientEmail && (
              <Text style={styles.emailSent}>
                We've sent an email to {recipientEmail} with the gift code and instructions.
              </Text>
            )}
            
            <TouchableOpacity 
              style={styles.doneButton}
              onPress={() => navigation.navigate('Dashboard')}
            >
              <Text style={styles.doneButtonText}>Done</Text>
            </TouchableOpacity>
          </View>
        </ScrollView>
      </ThemedView>
    );
  }
  
  return (
    <ThemedView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        <ThemedText style={styles.title}>Gift a Subscription</ThemedText>
        
        <ThemedText style={styles.description}>
          Give the gift of premium sports analytics to a friend or family member.
          Gift subscriptions provide access to all premium features.
        </ThemedText>
        
        <View style={styles.amountSection}>
          <ThemedText style={styles.sectionTitle}>Select Amount</ThemedText>
          <ThemedText style={styles.sectionDescription}>
            The amount determines how long the subscription will last.
            $25 provides approximately 1 month of premium access.
          </ThemedText>
          
          <View style={styles.pickerContainer}>
            <Picker
              selectedValue={amount}
              onValueChange={(value) => setAmount(Number(value))}
              style={styles.picker}
            >
              {GIFT_SUBSCRIPTION_AMOUNTS.map((option) => (
                <Picker.Item 
                  key={option.value.toString()} 
                  label={option.label} 
                  value={option.value} 
                />
              ))}
            </Picker>
          </View>
        </View>
        
        <View style={styles.recipientSection}>
          <ThemedText style={styles.sectionTitle}>Recipient Information (Optional)</ThemedText>
          
          <View style={styles.inputContainer}>
            <ThemedText style={styles.label}>Recipient Email</ThemedText>
            <TextInput
              style={styles.input}
              value={recipientEmail}
              onChangeText={setRecipientEmail}
              placeholder="Enter recipient's email"
              keyboardType="email-address"
              autoCapitalize="none"
            />
            <ThemedText style={styles.inputDescription}>
              We'll send the gift code and instructions to this email.
            </ThemedText>
          </View>
          
          <View style={styles.inputContainer}>
            <ThemedText style={styles.label}>Personal Message (Optional)</ThemedText>
            <TextInput
              style={[styles.input, styles.messageInput]}
              value={message}
              onChangeText={setMessage}
              placeholder="Add a personal message"
              multiline
              numberOfLines={4}
            />
          </View>
        </View>
        
        <TouchableOpacity
          style={styles.createButton}
          onPress={handleCreateGiftSubscription}
          disabled={loading}
        >
          {loading ? (
            <ActivityIndicator size="small" color="#ffffff" />
          ) : (
            <Text style={styles.createButtonText}>
              {paymentMethodId ? 'Create Gift Subscription' : 'Continue to Payment'}
            </Text>
          )}
        </TouchableOpacity>
        
        <ThemedText style={styles.termsText}>
          By creating a gift subscription, you agree to our Terms of Service and Privacy Policy.
          Gift subscriptions are non-refundable once redeemed.
        </ThemedText>
      </ScrollView>
    </ThemedView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollContent: {
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  description: {
    fontSize: 16,
    marginBottom: 24,
    lineHeight: 22,
  },
  amountSection: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  sectionDescription: {
    fontSize: 14,
    marginBottom: 16,
    lineHeight: 20,
  },
  pickerContainer: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    marginBottom: 8,
    backgroundColor: '#f9f9f9',
  },
  picker: {
    height: 50,
  },
  recipientSection: {
    marginBottom: 24,
  },
  inputContainer: {
    marginBottom: 16,
  },
  label: {
    fontSize: 16,
    marginBottom: 8,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    backgroundColor: '#fff',
  },
  messageInput: {
    height: 100,
    textAlignVertical: 'top',
  },
  inputDescription: {
    fontSize: 12,
    marginTop: 4,
    color: '#666',
  },
  createButton: {
    backgroundColor: '#4080ff',
    borderRadius: 8,
    padding: 16,
    alignItems: 'center',
    marginBottom: 16,
  },
  createButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  termsText: {
    fontSize: 12,
    color: '#666',
    textAlign: 'center',
    marginBottom: 24,
  },
  successContainer: {
    alignItems: 'center',
    padding: 20,
  },
  successTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 16,
    color: '#4080ff',
  },
  successMessage: {
    fontSize: 16,
    textAlign: 'center',
    marginBottom: 24,
    lineHeight: 22,
  },
  codeContainer: {
    backgroundColor: '#f0f7ff',
    padding: 20,
    borderRadius: 8,
    marginBottom: 24,
    width: '100%',
    alignItems: 'center',
  },
  codeLabel: {
    fontSize: 14,
    marginBottom: 8,
    color: '#666',
  },
  code: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#4080ff',
    letterSpacing: 2,
  },
  instructionsTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  instructions: {
    fontSize: 14,
    textAlign: 'center',
    marginBottom: 24,
    lineHeight: 20,
  },
  emailSent: {
    fontSize: 14,
    color: '#4caf50',
    textAlign: 'center',
    marginBottom: 24,
  },
  doneButton: {
    backgroundColor: '#4080ff',
    borderRadius: 8,
    padding: 16,
    alignItems: 'center',
    width: '100%',
  },
  doneButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default GiftSubscriptionScreen;