#!/bin/bash

# Vulnerability Scanning Script
# This script runs comprehensive vulnerability scans for AI Sports Edge

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}AI Sports Edge - Vulnerability Scanning${NC}"
echo "=================================================="

# Configuration variables
APP_NAME="ai-sports-edge"
REPORTS_DIR="security-reports/vulnerability-scanning"
CONFIG_DIR="config/security"
VULN_CONFIG="${CONFIG_DIR}/vulnerability-scan-config.json"
CURRENT_DATE=$(date +"%Y-%m-%d")
REPORT_FILE="${REPORTS_DIR}/vulnerability-scan-report-${CURRENT_DATE}.html"
LOG_FILE="${REPORTS_DIR}/vulnerability-scan-log-${CURRENT_DATE}.log"

# Function to check if a command exists
check_command() {
    if ! command -v $1 &> /dev/null; then
        echo -e "${RED}Error: $1 is not installed. Please install it first.${NC}"
        return 1
    fi
    return 0
}

# Check for required tools
check_command "trivy" || exit 1
check_command "npm" || exit 1
check_command "docker" || exit 1
check_command "jq" || exit 1

# Function to display section header
section_header() {
    echo ""
    echo -e "${BLUE}$1${NC}"
    echo "=================================================="
}

# Function to create directories
create_directories() {
    mkdir -p "${REPORTS_DIR}"
    mkdir -p "${CONFIG_DIR}"
    echo "Created directories: ${REPORTS_DIR}, ${CONFIG_DIR}"
}

# Function to create or update vulnerability scan configuration
create_vuln_config() {
    if [ ! -f "${VULN_CONFIG}" ]; then
        # Create initial vulnerability scan configuration file
        cat > "${VULN_CONFIG}" << EOF
{
  "targets": {
    "code": {
      "enabled": true,
      "directories": [
        ".",
        "src",
        "api"
      ],
      "exclude": [
        "node_modules",
        "dist",
        "build",
        ".git"
      ]
    },
    "dependencies": {
      "enabled": true,
      "package_managers": [
        "npm",
        "yarn",
        "pip"
      ]
    },
    "docker": {
      "enabled": true,
      "images": [
        "${APP_NAME}:latest",
        "node:16-alpine",
        "nginx:latest"
      ]
    },
    "infrastructure": {
      "enabled": true,
      "terraform_dirs": [
        "infrastructure/terraform"
      ],
      "cloudformation_dirs": [
        "infrastructure/cloudformation"
      ],
      "kubernetes_dirs": [
        "infrastructure/kubernetes"
      ]
    },
    "aws": {
      "enabled": true,
      "regions": [
        "us-east-1",
        "us-west-2"
      ],
      "services": [
        "s3",
        "ec2",
        "rds",
        "lambda",
        "iam"
      ]
    }
  },
  "severity_thresholds": {
    "critical": 0,
    "high": 5,
    "medium": 10,
    "low": 20
  },
  "schedule": {
    "frequency": "daily",
    "time": "01:00"
  },
  "notifications": {
    "email": [
      "security@example.com"
    ],
    "slack": "https://hooks.slack.com/services/REPLACE_WITH_ACTUAL_WEBHOOK"
  },
  "auto_remediation": {
    "enabled": false,
    "approve_required": true,
    "allowed_fixes": [
      "dependency_update",
      "docker_base_image_update"
    ]
  }
}
EOF
        echo -e "${GREEN}Created initial vulnerability scan configuration file: ${VULN_CONFIG}${NC}"
    else
        echo "Vulnerability scan configuration file already exists: ${VULN_CONFIG}"
    fi
}

# Function to scan code for vulnerabilities
scan_code() {
    section_header "Code Vulnerability Scan"
    
    # Get directories to scan from config
    local directories=$(jq -r '.targets.code.directories[]' "${VULN_CONFIG}")
    local exclude=$(jq -r '.targets.code.exclude[]' "${VULN_CONFIG}" | tr '\n' ',' | sed 's/,$//')
    
    for dir in $directories; do
        echo "Scanning directory: ${dir}"
        local output_file="${REPORTS_DIR}/code-scan-${dir//\//_}-${CURRENT_DATE}.json"
        
        # Run semgrep scan
        if command -v semgrep &> /dev/null; then
            echo "Running Semgrep scan..."
            semgrep --config=auto --json --output "${output_file}" "${dir}" | tee -a "${LOG_FILE}"
        else
            echo -e "${YELLOW}Warning: Semgrep not installed. Skipping code pattern analysis.${NC}"
        fi
    done
    
    echo -e "${GREEN}Code vulnerability scan completed.${NC}"
}

# Function to scan dependencies for vulnerabilities
scan_dependencies() {
    section_header "Dependency Vulnerability Scan"
    
    # Get package managers to scan from config
    local package_managers=$(jq -r '.targets.dependencies.package_managers[]' "${VULN_CONFIG}")
    
    for pm in $package_managers; do
        echo "Scanning dependencies managed by: ${pm}"
        local output_file="${REPORTS_DIR}/dependency-scan-${pm}-${CURRENT_DATE}.json"
        
        case "${pm}" in
            npm)
                if [ -f "package.json" ]; then
                    echo "Running npm audit..."
                    npm audit --json > "${output_file}" 2>> "${LOG_FILE}" || true
                else
                    echo -e "${YELLOW}Warning: package.json not found. Skipping npm dependency scan.${NC}"
                fi
                ;;
            yarn)
                if [ -f "yarn.lock" ]; then
                    echo "Running yarn audit..."
                    yarn audit --json > "${output_file}" 2>> "${LOG_FILE}" || true
                else
                    echo -e "${YELLOW}Warning: yarn.lock not found. Skipping yarn dependency scan.${NC}"
                fi
                ;;
            pip)
                if [ -f "requirements.txt" ]; then
                    echo "Running safety check for Python dependencies..."
                    if command -v safety &> /dev/null; then
                        safety check -r requirements.txt --json > "${output_file}" 2>> "${LOG_FILE}" || true
                    else
                        echo -e "${YELLOW}Warning: safety not installed. Skipping Python dependency scan.${NC}"
                    fi
                else
                    echo -e "${YELLOW}Warning: requirements.txt not found. Skipping Python dependency scan.${NC}"
                fi
                ;;
        esac
    done
    
    echo -e "${GREEN}Dependency vulnerability scan completed.${NC}"
}

# Function to scan Docker images for vulnerabilities
scan_docker_images() {
    section_header "Docker Image Vulnerability Scan"
    
    # Get Docker images to scan from config
    local images=$(jq -r '.targets.docker.images[]' "${VULN_CONFIG}")
    
    for image in $images; do
        echo "Scanning Docker image: ${image}"
        local output_file="${REPORTS_DIR}/docker-scan-${image//[:\/]/_}-${CURRENT_DATE}.json"
        
        # Run Trivy scan
        echo "Running Trivy scan..."
        trivy image --format json --output "${output_file}" "${image}" | tee -a "${LOG_FILE}"
    done
    
    echo -e "${GREEN}Docker image vulnerability scan completed.${NC}"
}

# Function to generate comprehensive report
generate_report() {
    section_header "Generating Report"
    
    echo "Generating comprehensive vulnerability scanning report..."
    
    # Create HTML report
    cat > "${REPORT_FILE}" << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vulnerability Scanning Report - ${CURRENT_DATE}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            color: #333;
        }
        h1, h2, h3 {
            color: #0066cc;
        }
        .header {
            background-color: #0066cc;
            color: white;
            padding: 20px;
            margin-bottom: 20px;
        }
        .section {
            margin-bottom: 30px;
            border: 1px solid #ddd;
            padding: 20px;
            border-radius: 5px;
        }
        .vulnerability {
            margin-bottom: 15px;
            padding: 15px;
            border-left: 4px solid;
        }
        .critical {
            border-left-color: #d9534f;
            background-color: #f9eaea;
        }
        .high {
            border-left-color: #f0ad4e;
            background-color: #fdf8e9;
        }
        .medium {
            border-left-color: #5bc0de;
            background-color: #eaf6fa;
        }
        .low {
            border-left-color: #5cb85c;
            background-color: #eaf6ea;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Vulnerability Scanning Report</h1>
        <p>AI Sports Edge - ${CURRENT_DATE}</p>
    </div>
    
    <div class="section">
        <h2>Executive Summary</h2>
        <p>This report presents the findings of a vulnerability scan conducted on AI Sports Edge infrastructure and applications on ${CURRENT_DATE}.</p>
        <p>The vulnerability scan was conducted to identify security vulnerabilities and provide recommendations for remediation.</p>
    </div>
    
    <div class="section">
        <h2>Findings Summary</h2>
        <p>Processing scan results to extract findings...</p>
    </div>
    
    <div class="section">
        <h2>Recommendations</h2>
        <p>Based on the findings of this vulnerability scan, the following recommendations are provided:</p>
        <ul>
            <li>Update all software and libraries to the latest versions</li>
            <li>Apply security patches promptly</li>
            <li>Follow secure coding practices</li>
            <li>Implement proper access controls</li>
            <li>Use encryption for sensitive data</li>
            <li>Regularly conduct vulnerability scans</li>
        </ul>
    </div>
</body>
</html>
EOF

    echo -e "${GREEN}Report generated: ${REPORT_FILE}${NC}"
}

# Function to schedule regular scans
schedule_regular_scans() {
    section_header "Scheduling Regular Scans"
    
    echo "Setting up scheduled vulnerability scanning..."
    
    # Get schedule from config
    local frequency=$(jq -r '.schedule.frequency' "${VULN_CONFIG}")
    local time=$(jq -r '.schedule.time' "${VULN_CONFIG}")
    
    # Create cron expression based on schedule
    local cron_expression=""
    
    case "${frequency}" in
        daily)
            # Run daily at specified time
            local hour=$(echo "${time}" | cut -d':' -f1)
            local minute=$(echo "${time}" | cut -d':' -f2)
            cron_expression="${minute} ${hour} * * *"
            ;;
        weekly)
            # Run weekly on Monday at specified time
            local hour=$(echo "${time}" | cut -d':' -f1)
            local minute=$(echo "${time}" | cut -d':' -f2)
            cron_expression="${minute} ${hour} * * 1"
            ;;
        monthly)
            # Run monthly on the 1st at specified time
            local hour=$(echo "${time}" | cut -d':' -f1)
            local minute=$(echo "${time}" | cut -d':' -f2)
            cron_expression="${minute} ${hour} 1 * *"
            ;;
        *)
            echo -e "${RED}Error: Invalid frequency: ${frequency}${NC}"
            return 1
            ;;
    esac
    
    echo "Cron expression: ${cron_expression}"
    
    # Create cron job
    local cron_job="${cron_expression} $(realpath "$0") --run-all > ${REPORTS_DIR}/scheduled-scan-\$(date +\%Y-\%m-\%d).log 2>&1"
    
    echo "Cron job: ${cron_job}"
    
    # Add cron job to crontab
    (crontab -l 2>/dev/null | grep -v "$(basename "$0")"; echo "${cron_job}") | crontab -
    
    echo -e "${GREEN}Scheduled regular scans with cron expression: ${cron_expression}${NC}"
}

# Function to run all scans
run_all_scans() {
    section_header "Running All Scans"
    
    # Run all scan types
    if jq -e '.targets.code.enabled' "${VULN_CONFIG}" > /dev/null; then
        scan_code
    fi
    
    if jq -e '.targets.dependencies.enabled' "${VULN_CONFIG}" > /dev/null; then
        scan_dependencies
    fi
    
    if jq -e '.targets.docker.enabled' "${VULN_CONFIG}" > /dev/null; then
        scan_docker_images
    fi
    
    # Generate report
    generate_report
    
    echo -e "${GREEN}All scans completed.${NC}"
}

# Function to display help
show_help() {
    echo "Usage: $0 [options]"
    echo ""
    echo "Options:"
    echo "  --init                Initialize vulnerability scanning configuration"
    echo "  --run-code            Run code vulnerability scan"
    echo "  --run-dependencies    Run dependency vulnerability scan"
    echo "  --run-docker          Run Docker image vulnerability scan"
    echo "  --run-all             Run all scans"
    echo "  --generate-report     Generate comprehensive report"
    echo "  --schedule            Schedule regular scans"
    echo "  --help                Display this help message"
    echo ""
    echo "Examples:"
    echo "  $0 --init                  # Initialize vulnerability scanning configuration"
    echo "  $0 --run-all               # Run all scans"
    echo "  $0 --generate-report       # Generate comprehensive report"
}

# Main function
main() {
    # Create directories
    create_directories
    
    # Parse command line arguments
    if [ $# -eq 0 ]; then
        show_help
        exit 0
    fi
    
    while [ $# -gt 0 ]; do
        case $1 in
            --init)
                create_vuln_config
                exit 0
                ;;
            --run-code)
                if [ ! -f "${VULN_CONFIG}" ]; then
                    echo -e "${RED}Error: Vulnerability scan configuration file not found: ${VULN_CONFIG}${NC}"
                    echo "Run '$0 --init' to create the configuration file."
                    exit 1
                fi
                
                scan_code
                exit 0
                ;;
            --run-dependencies)
                if [ ! -f "${VULN_CONFIG}" ]; then
                    echo -e "${RED}Error: Vulnerability scan configuration file not found: ${VULN_CONFIG}${NC}"
                    echo "Run '$0 --init' to create the configuration file."
                    exit 1
                fi
                
                scan_dependencies
                exit 0
                ;;
            --run-docker)
                if [ ! -f "${VULN_CONFIG}" ]; then
                    echo -e "${RED}Error: Vulnerability scan configuration file not found: ${VULN_CONFIG}${NC}"
                    echo "Run '$0 --init' to create the configuration file."
                    exit 1
                fi
                
                scan_docker_images
                exit 0
                ;;
            --run-all)
                if [ ! -f "${VULN_CONFIG}" ]; then
                    echo -e "${RED}Error: Vulnerability scan configuration file not found: ${VULN_CONFIG}${NC}"
                    echo "Run '$0 --init' to create the configuration file."
                    exit 1
                fi
                
                run_all_scans
                exit 0
                ;;
            --generate-report)
                generate_report
                exit 0
                ;;
            --schedule)
                if [ ! -f "${VULN_CONFIG}" ]; then
                    echo -e "${RED}Error: Vulnerability scan configuration file not found: ${VULN_CONFIG}${NC}"
                    echo "Run '$0 --init' to create the configuration file."
                    exit 1
                fi
                
                schedule_regular_scans
                exit 0
                ;;
            --help)
                show_help
                exit 0
                ;;
            *)
                echo -e "${RED}Error: Unknown option $1${NC}"
                show_help
                exit 1
                ;;
        esac
        shift
    done
}

# Run the main function
main "$@"
